Test Case 1: User Registration (Sign-Up)
Test Case ID: TC-01
Description: Verify that a new user can successfully register using the Sign-Up form.
Pre-condition: User is not logged in.
Test Steps:

Navigate to the Sign-Up page.
Enter the following information in the form:
Name: Dana Morgan
Email: dana.morgan196@gmail.com
Gender: Female
Password: Password123
Confirm Password: Password123
Click on the "Sign Up" button.
Expected Result:

The system validates the input fields.
If the inputs are correct, the user is registered, and a success message is displayed.
The user is redirected to the To-Do list page (/todo).
The server response should be logged, and the user should have access to the To-Do list page.


Test Case 2: User Login
Test Case ID: TC-02
Description: Verify that the user can log in with valid credentials using the Login form.
Pre-condition: User has registered an account.
Test Steps:

Navigate to the Login page.
Enter the following credentials in the form:
Email: dana.morgan196@gmail.com
Password: Password123
Click on the "Login" button.
Expected Result:
The system validates the credentials.
The user is logged in successfully.
A JWT token is generated and stored in the local storage.
The user is redirected to the To-Do list page (/todo).
The server response should be logged, and the user has access to the To-Do list.


Test Case 3: User Login with Invalid Credentials
Test Case ID: TC-03
Description: Verify that the user cannot log in with invalid credentials.
Pre-condition: User has registered an account.
Test Steps:

Navigate to the Login page.
Enter invalid credentials:
Email: dana.morgan196@gmail.com
Password: WrongPassword
Click on the "Login" button.
Expected Result:
The system should check the credentials and reject the login.
An error message should be displayed: "Invalid credentials" or a similar message.


Test Case 4: Add a New Task
Test Case ID: TC-04
Description: Verify that the logged-in user can successfully add a new task.
Pre-condition: User is logged in, and the JWT token is stored in local storage.
Test Steps:

Navigate to the To-Do list page (/todo).
Enter a new task in the "New Task" input field (e.g., "Buy groceries").
Click on the "Add Task" button.
Expected Result:

The task should be added to the list of tasks.
The task list should update with the newly added task.
The system should send the task to the server, and the server should respond with the task's details.


Test Case 5: Edit an Existing Task
Test Case ID: TC-05
Description: Verify that the user can edit an existing task.
Pre-condition: User is logged in and has tasks listed in the To-Do list.
Test Steps:

Navigate to the To-Do list page (/todo).
Click on the "Edit" button next to an existing task (e.g., "Buy groceries").
Modify the task in the input field.
Click on the "Save" button to save the edited task.
Expected Result:

The task should be updated in the task list.
The server should accept the new task data and update it in the database.
The task list should reflect the edited task.


Test Case 6: Delete a Task
Test Case ID: TC-06
Description: Verify that the user can delete a task from the To-Do list.
Pre-condition: User is logged in and has tasks listed in the To-Do list.
Test Steps:

Navigate to the To-Do list page (/todo).
Click on the "Delete" button next to an existing task (e.g., "Buy groceries").
Confirm the deletion.
Expected Result:

The task should be removed from the task list.
The system should make an API call to delete the task from the database.
The task list should be updated, and the task should no longer appear.
Test Case 7: Handle Error when Logged Out (No Token)


Test Case ID: TC-07
Description: Verify that the user receives an error message when trying to perform actions (add, edit, delete tasks) without being logged in.
Pre-condition: User is not logged in.
Test Steps:

Navigate to the To-Do list page (/todo).
Try to add, edit, or delete a task.
Expected Result:

The system should check if a token is present in local storage.
If no token is found, the system should display an error message: "You need to log in first."
The user should be prevented from interacting with the tasks.
